{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\PMS3-main\\\\components\\\\Graphics.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { LineChart, PieChart } from \"react-native-chart-kit\";\nimport { invariables, labels } from \"../invariables/invariables\";\n\nvar Graphics = function Graphics() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isEnabled = _useState2[0],\n      setIsEnabled = _useState2[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setIsEnabled(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var checkOrientation = function checkOrientation() {\n    var dim = Dimensions.get('screen');\n\n    if (dim.height >= dim.width) {\n      return portrait;\n    } else {\n      return landscape;\n    }\n  };\n\n  var useScreenDimensions = function useScreenDimensions() {\n    var _useState3 = useState(Dimensions.get('screen')),\n        _useState4 = _slicedToArray(_useState3, 2),\n        screenData = _useState4[0],\n        setScreenData = _useState4[1];\n\n    useEffect(function () {\n      var onChange = function onChange(result) {\n        setScreenData(result.screen);\n      };\n\n      Dimensions.addEventListener('change', onChange);\n      return function () {\n        return Dimensions.removeEventListener('change', onChange);\n      };\n    });\n    return _objectSpread(_objectSpread({}, screenData), {}, {\n      isLandscape: screenData.width > screenData.height\n    });\n  };\n\n  var screenData = useScreenDimensions();\n\n  if (isEnabled) {\n    return React.createElement(View, {\n      style: checkOrientation().container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, \"Chart\"), React.createElement(Switch, {\n      trackColor: {\n        false: \"#F5B725\",\n        true: \"#2B3B71\"\n      },\n      thumbColor: isEnabled ? \"#F5B725\" : \"#2B3B71\",\n      ios_backgroundColor: \"#5b417c\",\n      onValueChange: toggleSwitch,\n      value: isEnabled,\n      style: checkOrientation().toggle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }), React.createElement(PieChart, {\n      data: [{\n        percent: 5,\n        color: '#755a57'\n      }, {\n        percent: 5,\n        color: '#92fff6'\n      }, {\n        percent: 10,\n        color: '#eb616c'\n      }, {\n        percent: 80,\n        color: '#2B3B71'\n      }],\n      hasLegend: false,\n      width: screenData.isLandscape ? Dimensions.get('screen').width : Dimensions.get('screen').width,\n      height: screenData.isLandscape ? Dimensions.get(\"screen\").height / 1.8 : Dimensions.get(\"screen\").height / 3,\n      chartConfig: {\n        color: function color() {\n          var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return \"rgba(0, 0, 0, \" + opacity + \")\";\n        }\n      },\n      style: {\n        alignItems: \"center\",\n        marginLeft: '50%'\n      },\n      accessor: \"percent\",\n      absolute: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n  } else {\n    return React.createElement(View, {\n      style: checkOrientation().container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, \"Pie\"), React.createElement(Switch, {\n      trackColor: {\n        false: \"#2B3B71\",\n        true: \"#DED7B1\"\n      },\n      thumbColor: isEnabled ? \"#2B3B71\" : \"#DED7B1\",\n      ios_backgroundColor: \"#2B3B71\",\n      onValueChange: toggleSwitch,\n      value: isEnabled,\n      style: checkOrientation().toggle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }), React.createElement(LineChart, {\n      data: {\n        labels: labels,\n        datasets: [{\n          data: invariables\n        }]\n      },\n      width: screenData.isLandscape ? Dimensions.get(\"screen\").width : Dimensions.get(\"screen\").width * 1.3,\n      height: screenData.isLandscape ? Dimensions.get(\"screen\").height / 4.5 : Dimensions.get(\"screen\").height / 6,\n      chartConfig: {\n        backgroundColor: \"rgb(242, 242, 242)\",\n        backgroundGradientFrom: \"rgb(242, 242, 242)\",\n        backgroundGradientTo: \"rgb(242, 242, 242)\",\n        color: function color() {\n          var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n          return \"rgba(0, 0, 0, \" + opacity + \")\";\n        },\n        propsForDots: {\n          r: \"0\",\n          strokeWidth: \"0\",\n          stroke: \"#000\",\n          barPercentage: '1'\n        }\n      },\n      style: screenData.isLandscape ? {\n        paddingRight: Dimensions.get(\"screen\").width / 4.5,\n        marginLeft: Dimensions.get(\"screen\").width / 10,\n        marginTop: Dimensions.get(\"screen\").height / 6.5\n      } : {\n        paddingRight: Dimensions.get(\"screen\").width / 4,\n        marginLeft: Dimensions.get(\"screen\").width / 9,\n        marginTop: Dimensions.get(\"screen\").height / 11\n      },\n      withInnerLines: false,\n      withOuterLines: false,\n      withHorizontalLabels: false,\n      withVerticalLabels: false,\n      bezier: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }));\n  }\n};\n\nexport default Graphics;\nvar portrait = StyleSheet.create({\n  container: {\n    flex: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: '30%'\n  },\n  toggle: {\n    flex: 0,\n    marginTop: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: '15%'\n  }\n});\nvar landscape = StyleSheet.create({\n  container: {\n    flex: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginTop: '5%'\n  },\n  toggle: {\n    flex: 0,\n    marginTop: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/PMS3-main/components/Graphics.js"],"names":["React","useState","useEffect","LineChart","PieChart","invariables","labels","Graphics","isEnabled","setIsEnabled","toggleSwitch","previousState","checkOrientation","dim","Dimensions","get","height","width","portrait","landscape","useScreenDimensions","screenData","setScreenData","onChange","result","screen","addEventListener","removeEventListener","isLandscape","container","false","true","toggle","percent","color","opacity","alignItems","marginLeft","datasets","data","backgroundColor","backgroundGradientFrom","backgroundGradientTo","propsForDots","r","strokeWidth","stroke","barPercentage","paddingRight","marginTop","StyleSheet","create","flex","justifyContent","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {StyleSheet, Text, View, Switch, Dimensions} from 'react-native';\nimport {LineChart, PieChart} from \"react-native-chart-kit\";\nimport {invariables , labels} from '../invariables/invariables'\n\nconst Graphics = () => {\n\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n    const checkOrientation = () => {\n        const dim = Dimensions.get('screen');\n        if (dim.height >= dim.width) {\n            return portrait\n        } else {\n            return landscape\n        }\n    }\n\n    const useScreenDimensions = () => {\n        const [screenData, setScreenData] = useState(Dimensions.get('screen'));\n\n        useEffect(() => {\n            const onChange = (result) => {\n                setScreenData(result.screen);\n            };\n\n            Dimensions.addEventListener('change', onChange);\n\n            return () => Dimensions.removeEventListener('change', onChange);\n        });\n\n        return {\n            ...screenData,\n            isLandscape: screenData.width > screenData.height,\n        };\n    };\n\n    const screenData = useScreenDimensions();\n\n    if (isEnabled) {\n        return (\n            <View style={checkOrientation().container}>\n                <Text>Chart</Text>\n                <Switch\n                    trackColor={{ false: \"#F5B725\", true: \"#2B3B71\" }}\n                    thumbColor={isEnabled ? \"#F5B725\" : \"#2B3B71\"}\n                    ios_backgroundColor=\"#5b417c\"\n                    onValueChange={toggleSwitch}\n                    value={isEnabled}\n                    style={checkOrientation().toggle}\n                />\n                <PieChart\n                    data={[\n                        {\n                            percent: 5,\n                            color: '#755a57',\n                        },\n                        {\n                            percent: 5,\n                            color: '#92fff6',\n                        },\n                        {\n                            percent: 10,\n                            color: '#eb616c',\n                        },\n                        {\n                            percent: 80,\n                            color: '#2B3B71',\n                        },\n                    ]}\n                    hasLegend={false}\n                    width={\n                        screenData.isLandscape ?\n                        Dimensions.get('screen').width :\n                        Dimensions.get('screen').width\n                    }\n                    height={\n                        screenData.isLandscape ?\n                        Dimensions.get(\"screen\").height / 1.8:\n                        Dimensions.get(\"screen\").height / 3\n                    }\n                    chartConfig={{\n                        color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n                    }}\n                    style={{\n                        alignItems: \"center\",\n                        marginLeft: '50%',\n                    }}\n                    accessor=\"percent\"\n                    absolute\n                />\n            </View>\n        )\n    } else {\n        return (\n            <View style={checkOrientation().container}>\n                <Text>Pie</Text>\n                <Switch\n                    trackColor={{ false: \"#2B3B71\", true: \"#DED7B1\" }}\n                    thumbColor={isEnabled ? \"#2B3B71\" : \"#DED7B1\"}\n                    ios_backgroundColor=\"#2B3B71\"\n                    onValueChange={toggleSwitch}\n                    value={isEnabled}\n                    style={checkOrientation().toggle}\n                />\n                <LineChart\n                    data={{\n                        labels: labels,\n                        datasets: [\n                            {\n                                data: invariables\n                            }\n                        ]\n                    }}\n                    width={\n                        screenData.isLandscape ?\n                            Dimensions.get(\"screen\").width :\n                            Dimensions.get(\"screen\").width * 1.3\n                    }\n                    height={\n                        screenData.isLandscape ?\n                            Dimensions.get(\"screen\").height / 4.5 :\n                            Dimensions.get(\"screen\").height / 6\n                    }\n                    chartConfig={{\n                        backgroundColor: \"rgb(242, 242, 242)\",\n                        backgroundGradientFrom: \"rgb(242, 242, 242)\",\n                        backgroundGradientTo: \"rgb(242, 242, 242)\",\n                        color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n                        propsForDots: {\n                            r: \"0\",\n                            strokeWidth: \"0\",\n                            stroke: \"#000\",\n                            barPercentage: '1'\n                        }\n                    }}\n                    style={\n                        screenData.isLandscape ?\n                            {\n                                paddingRight: Dimensions.get(\"screen\").width / 4.5,\n                                marginLeft: Dimensions.get(\"screen\").width / 10,\n                                marginTop: Dimensions.get(\"screen\").height / 6.5,\n                            } :\n                        {\n                            paddingRight: Dimensions.get(\"screen\").width / 4,\n                            marginLeft: Dimensions.get(\"screen\").width / 9,\n                            marginTop: Dimensions.get(\"screen\").height / 11,\n                        }\n                    }\n                    withInnerLines={false}\n                    withOuterLines={false}\n                    withHorizontalLabels={false}\n                    withVerticalLabels={false}\n                    bezier\n                />\n            </View>\n        )\n    }\n}\n\nexport default Graphics\n\nconst portrait = StyleSheet.create({\n    container: {\n        flex: 0,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: '30%',\n    },\n    toggle: {\n        flex: 0,\n        marginTop: 5,\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginBottom: '15%'\n    },\n});\n\nconst landscape = StyleSheet.create({\n    container: {\n        flex: 0,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginTop: '5%',\n    },\n    toggle: {\n        flex: 0,\n        marginTop: 5,\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}